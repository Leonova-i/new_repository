{"name": "test_menu_reset", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=112.0.5615.49)\nStacktrace:\n0   chromedriver                        0x000000010b7b6ae8 chromedriver + 4958952\n1   chromedriver                        0x000000010b7ae7b3 chromedriver + 4925363\n2   chromedriver                        0x000000010b370051 chromedriver + 475217\n3   chromedriver                        0x000000010b3b52e8 chromedriver + 758504\n4   chromedriver                        0x000000010b3a6283 chromedriver + 696963\n5   chromedriver                        0x000000010b3d9c12 chromedriver + 908306\n6   chromedriver                        0x000000010b3a58f1 chromedriver + 694513\n7   chromedriver                        0x000000010b3d9dce chromedriver + 908750\n8   chromedriver                        0x000000010b3f525b chromedriver + 1020507\n9   chromedriver                        0x000000010b3d99e3 chromedriver + 907747\n10  chromedriver                        0x000000010b3a3aef chromedriver + 686831\n11  chromedriver                        0x000000010b3a500e chromedriver + 692238\n12  chromedriver                        0x000000010b7729ad chromedriver + 4680109\n13  chromedriver                        0x000000010b777c12 chromedriver + 4701202\n14  chromedriver                        0x000000010b77e79f chromedriver + 4728735\n15  chromedriver                        0x000000010b778b7a chromedriver + 4705146\n16  chromedriver                        0x000000010b74b27e chromedriver + 4518526\n17  chromedriver                        0x000000010b798908 chromedriver + 4835592\n18  chromedriver                        0x000000010b798a87 chromedriver + 4835975\n19  chromedriver                        0x000000010b7a800f chromedriver + 4898831\n20  libsystem_pthread.dylib             0x00007ff80d08b1d3 _pthread_start + 125\n21  libsystem_pthread.dylib             0x00007ff80d086bd3 thread_start + 15", "trace": "self = <test_base_page.TestBasePage object at 0x10c87db10>, get_website_base = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"40cbe2bca3fe45c41f7501e7cd1c20af\")>\ncome_back = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"40cbe2bca3fe45c41f7501e7cd1c20af\")>\n\n    def test_menu_reset(self, get_website_base, come_back):\n        get_website_base.find_element(*IPL().BASE_ADD_TO_CART_B).click()\n        reset = BP(get_website_base).menu_reset()\n>       reset.click()\n\nfinaly_project/tests/test_base_page.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:404: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10c83a750>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...ff80d08b1d3 _pthread_start + 125\\\\n21  libsystem_pthread.dylib             0x00007ff80d086bd3 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=112.0.5615.49)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010b7b6ae8 chromedriver + 4958952\nE       1   chromedriver                        0x000000010b7ae7b3 chromedriver + 4925363\nE       2   chromedriver                        0x000000010b370051 chromedriver + 475217\nE       3   chromedriver                        0x000000010b3b52e8 chromedriver + 758504\nE       4   chromedriver                        0x000000010b3a6283 chromedriver + 696963\nE       5   chromedriver                        0x000000010b3d9c12 chromedriver + 908306\nE       6   chromedriver                        0x000000010b3a58f1 chromedriver + 694513\nE       7   chromedriver                        0x000000010b3d9dce chromedriver + 908750\nE       8   chromedriver                        0x000000010b3f525b chromedriver + 1020507\nE       9   chromedriver                        0x000000010b3d99e3 chromedriver + 907747\nE       10  chromedriver                        0x000000010b3a3aef chromedriver + 686831\nE       11  chromedriver                        0x000000010b3a500e chromedriver + 692238\nE       12  chromedriver                        0x000000010b7729ad chromedriver + 4680109\nE       13  chromedriver                        0x000000010b777c12 chromedriver + 4701202\nE       14  chromedriver                        0x000000010b77e79f chromedriver + 4728735\nE       15  chromedriver                        0x000000010b778b7a chromedriver + 4705146\nE       16  chromedriver                        0x000000010b74b27e chromedriver + 4518526\nE       17  chromedriver                        0x000000010b798908 chromedriver + 4835592\nE       18  chromedriver                        0x000000010b798a87 chromedriver + 4835975\nE       19  chromedriver                        0x000000010b7a800f chromedriver + 4898831\nE       20  libsystem_pthread.dylib             0x00007ff80d08b1d3 _pthread_start + 125\nE       21  libsystem_pthread.dylib             0x00007ff80d086bd3 thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: ElementNotInteractableException"}, "start": 1681755758374, "stop": 1681755788514, "uuid": "8ef7ce0c-024c-4e43-9d43-e9d580b97973", "historyId": "d946183685509dcaa0037db0bbb513db", "testCaseId": "874fcebea27ded4f5231290b9bfc68a9", "fullName": "finaly_project.tests.test_base_page.TestBasePage#test_menu_reset", "labels": [{"name": "parentSuite", "value": "finaly_project.tests"}, {"name": "suite", "value": "test_base_page"}, {"name": "subSuite", "value": "TestBasePage"}, {"name": "host", "value": "maksim"}, {"name": "thread", "value": "51301-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "finaly_project.tests.test_base_page"}]}